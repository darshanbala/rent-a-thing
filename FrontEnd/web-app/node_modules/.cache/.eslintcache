[{"/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/index.js":"1","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/App.js":"2","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/CreateAccount.js":"3","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Home.js":"4","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Login.js":"5","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/SearchBar.js":"6","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Things.js":"7"},{"size":167,"mtime":1625576710502,"results":"8","hashOfConfig":"9"},{"size":2573,"mtime":1625661879771,"results":"10","hashOfConfig":"9"},{"size":9351,"mtime":1625663399205,"results":"11","hashOfConfig":"9"},{"size":1788,"mtime":1625589489690,"results":"12","hashOfConfig":"9"},{"size":4134,"mtime":1625662446038,"results":"13","hashOfConfig":"9"},{"size":1816,"mtime":1625642889649,"results":"14","hashOfConfig":"9"},{"size":282,"mtime":1625589489691,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"oe3iu1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"18"},"/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/index.js",[],["36","37"],"/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/App.js",["38"],"import React, { Component } from 'react';\nimport './index.css';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    NavLink\n} from 'react-router-dom';\nimport Home from './Home';\nimport CreateAccount from './CreateAccount';\nimport Login from './Login';\n\n\nclass App extends Component {\n\n    state = { isLoggedIn: false, user: '' };\n\n    async checkWhoIsSignedIn() {\n        const response = await fetch(`${process.env.REACT_APP_API_URL}/checkWhoIsSignedIn`, { method: 'GET', credentials: 'include' });\n        const user = await response.json();\n        return user;\n    }\n\n    async toggleLoggedIn(arg) {\n        if (arg) {\n            this.setState(state => ({ ...state, isLoggedIn: true }));\n        } else {\n            this.setState(state => ({ ...state, isLoggedIn: false }));\n        }\n    }\n\n    setUser(updatedUserValue) {\n        this.setState(state => ({ ...state, user: updatedUserValue }));\n    }\n\n\n    render() {\n        const { isLoggedIn, user } = this.state;\n\n        return (\n\n            <Router>\n                <div className=\"header\">\n                    Rent A Thing\n                </div>\n                <nav className=\"navBar\">\n                    <NavLink className=\"navButton\" to=\"/\" activeClassName=\"active\">Home</NavLink>\n                    <NavLink className=\"navButton floatRight\" to=\"/Login\" activeClassName=\"active\">Login</NavLink>\n                    <NavLink className=\"navButton floatRight\" to=\"/CreateAccount\" activeClassName=\"active\">Create Account</NavLink>\n                </nav>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home user={user} setUser={(arg) => this.setUser(arg)} toggleLoggedIn={(arg) => this.toggleLoggedIn(arg)} checkWhoIsSignedIn={() => this.checkWhoIsSignedIn()}></Home>\n                    </Route>\n                    <Route path=\"/CreateAccount\">\n                        <CreateAccount user={user} setUser={(arg) => this.setUser(arg)} toggleLoggedIn={(arg) => this.toggleLoggedIn(arg)} checkWhoIsSignedIn={() => this.checkWhoIsSignedIn()} />\n                    </Route>\n                    <Route path=\"/Login\">\n                        <Login user={user} setUser={(arg) => this.setUser(arg)} toggleLoggedIn={(arg) => this.toggleLoggedIn(arg)} checkWhoIsSignedIn={() => this.checkWhoIsSignedIn()}></Login>\n                    </Route>\n                </Switch>\n                <div className=\"footer\">\n                  <p>Legal stuff | Contact Info | etc.</p>\n                </div>\n              </Router>\n\n        );\n    }\n}\n\nexport default App;\n","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/CreateAccount.js",["39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55"],"import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './index.css';\n\nclass CreateAccount extends Component {\n\n    state = {\n      valid_new_user: false,\n      first_name: \"\",\n      last_name: \"\",\n      email: \"\",\n      password1: \"\",\n      password2: \"\",\n      DoB: \"\",\n      phone_number: \"\",\n      address_1: \"\",\n      address_2: \"\",\n      city: \"\",\n      postcode: \"\",\n      validationMessage: null\n     }\n\n    constructor(props) {\n        super(props);\n        console.log(\"\");\n    }\n\n    componentDidMount() {\n        console.log(\"\");\n    }\n\n    componentDidUpdate() {\n        console.log(\"\");\n    }\n\n    componentWillUnmount() {\n        console.log(\"\");\n    }\n\n    updateState(e) {\n\n    }\n\n    updateInfo(e) {\n      const { name, value } = e.target;\n      this.setState({\n        [name]: value\n      })\n    }\n\n    async submitEmailInfo(e) { //async\n      e.preventDefault();\n      const { email, password1, password2 } = this.state\n      if(this.validateSubmit('first')) //And the user doesnt exist already\n          {\n        this.setState({\n          valid_new_user: true,\n          validationMessage: null\n        })\n      }else{\n        this.setState({\n          validationMessage: \"Please ensure all fields are complete and valid\"\n        })\n      }\n    }\n\n    async submitUser(e) {\n      e.preventDefault()\n      if(this.validateSubmit('second')){\n        this.setState({validationMessage: null})\n        const toBeSent = {\n          first_name: this.state.first_name,\n          last_name: this.state.last_name,\n          email: this.state.email,\n          password1: this.state.password1,\n          password2: this.state.password2,\n          DoB: this.state.DoB,\n          phone_number: this.state.phone_number,\n          address_1: this.state.address_1,\n          address_2: this.state.address_2,\n          city: this.state.city,\n          postcode: this.state.postcode\n         }\n        console.log('Body of fetch will be: '+JSON.stringify(toBeSent))\n        const response = await fetch(\n            `${process.env.REACT_APP_API_URL}/createAccount`,\n            {\n                method: 'POST',\n                credentials: 'include',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(toBeSent)\n            }\n        );\n        console.log(await response.json())\n      }else{\n        this.setState({\n          validationMessage: \"Please ensure all fields are complete and valid\"\n        })\n      }\n    }\n\n    validateLive(info) {\n      const { first_name, last_name, email, password1, password2, DoB, phone_number, address_1, address_2, city, postcode } = this.state\n\n      switch(info) {\n        case first_name: {}\n        break\n        case last_name: {}\n        break\n        case email: {}\n        break\n        case password1: {\n          if(password1.length < 8){\n            return (<p className=\"error\">Password must be at least 8 characters</p>)\n          }\n        }\n        break\n        case password2: {\n          if(password2 !== password1){\n            return (<p className=\"error\">Passwords do not match</p>)\n          }\n        }\n        break\n        case DoB: {}\n        break\n        case phone_number: {\n          if(phone_number[0] === \"+\"){\n            if(phone_number.length !== 12) {\n              return (<p className=\"error\">Please enter a valid phone number</p>)\n            }\n          }else{\n            if(phone_number.length !== 11) {\n              return (<p className=\"error\">Please enter a valid phone number</p>)\n            }\n          }\n          for(const i of phone_number){\n            if(isNaN(i)){\n              return (<p className=\"error\">Please enter a valid phone number</p>)\n            }\n          }\n        }\n        break\n        case address_1: {}\n        break\n        case address_2: {}\n        break\n        case city: {}\n        break\n        case postcode: {} //Link to royal mail postcodes API\n        break\n      }\n    }\n\n    validateSubmit(which) {\n      const { password1, password2, phone_number } = this.state\n\n      if(which === 'first'){\n        if(password2 !== password1 || password1.length < 8){\n          return false\n        }else{\n          return true;\n        }\n      }else if(which === 'second'){\n        if(phone_number[0] === \"+\"){\n          if(phone_number.length !== 12) {\n            return false\n          }\n        }else{\n          if(phone_number.length !== 11) {\n            return false\n          }\n        }\n        for(const i of phone_number){\n          if(isNaN(i)){\n            return false\n          }\n        }\n        return true;\n      }\n    }\n\n    render() {\n      const { validationMessage, valid_new_user, first_name, last_name, email, password1, password2, DoB, phone_number, address_1, address_2, city, postcode } = this.state\n      if(!valid_new_user) {\n          return(\n            <main>\n                <div>\n                  <h1>CreateAccount</h1>\n                  <form className=\"SubmitStory\">\n                      <section>\n                        <label htmlFor=\"email\" value=\"Email address: \" >Email address: </label>\n                        <input type=\"text\" name=\"email\" id=\"email\" value={ email } onChange={(e) => this.updateInfo(e)}/>\n                        <div>{this.validateLive(email)}</div>\n                      </section>\n                      <section>\n                        <label htmlFor=\"password1\" value=\"Password: \" >Password: </label>\n                        <input type=\"text\" name=\"password1\" id=\"password1\" value={ password1 } onChange={(e) => this.updateInfo(e)}/>\n                        <div>{this.validateLive(password1)}</div>\n                      </section>\n                      <section>\n                        <label htmlFor=\"password2\" value=\"Re-enter password: \" value={ password2 } >Re-enter password: </label>\n                        <input type=\"text\" name=\"password2\" id=\"password2\" onChange={(e) => this.updateInfo(e)}/>\n                        <div>{this.validateLive(password2)}</div>\n                      </section>\n                      <section>\n                        <input type=\"submit\"  onClick={(e) => this.submitEmailInfo(e)} value=\"Submit\"/>\n                        {validationMessage && <p className=\"error\">{validationMessage}</p>}\n                      </section>\n                </form>\n                </div>\n              </main>\n          );\n      }\n      else{\n          return(\n            <main>\n                <div>\n                  <h1>User details:</h1>\n                  <form className=\"SubmitStory\">\n                    <section>\n                      <label htmlFor=\"first_name\" value=\"First name: \" >First name: </label>\n                      <input type=\"text\" name=\"first_name\" id=\"first_name\" value={ first_name } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"last_name\" value=\"Last name: \" >Last name: </label>\n                      <input type=\"text\" name=\"last_name\" id=\"last_name\" value={ last_name } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"DoB\" value=\"Date of birth : \" >Date of birth : </label>\n                      <input type=\"date\" name=\"DoB\" id=\"DoB\" value={ DoB } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"phone_number\" value=\"Phone number: \" >Phone number: </label>\n                      <input type=\"text\" name=\"phone_number\" id=\"phone_number\" value={ phone_number } onChange={(e) => this.updateInfo(e)}/>\n                      <div>{this.validateLive(phone_number)}</div>\n                    </section>\n                    <section>\n                      <label htmlFor=\"address_1\" value=\"Address line 1: \" >Address line 1: </label>\n                      <input type=\"text\" name=\"address_1\" id=\"address_1\" value={ address_1 } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"address_2\" value=\"Address line 2: \" >Address line 2: </label>\n                      <input type=\"text\" name=\"address_2\" id=\"address_2\" value={ address_2 } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"city\" value=\"City : \" >City : </label>\n                      <input type=\"text\" name=\"city\" id=\"city\" value={ city } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <label htmlFor=\"postcode\" value=\"Postcode: \" >Postcode: </label>\n                      <input type=\"text\" name=\"postcode\" id=\"postcode\" value={ postcode } onChange={(e) => this.updateInfo(e)}/>\n                    </section>\n                    <section>\n                      <input type=\"submit\" name=\"submit\" value=\"Submit\" onClick={(e) => this.submitUser(e)}/>\n                      {validationMessage && <p className=\"error\">{validationMessage}</p>}\n                    </section>\n                </form>\n                </div>\n              </main>\n          )\n      }\n    }\n}\n\nexport default CreateAccount;\n","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Home.js",["56"],"import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './index.css';\nimport SearchBar from './SearchBar';\nimport Things from './Things';\n\nclass Home extends Component {\n\n    state = {\n        submissionConfirmed: false,\n        searchCriteria: {}\n    }\n\n    constructor(props) {\n        super(props);\n        console.log(\"\");\n    }\n\n    componentDidMount() {\n        console.log(\"\");\n    }\n\n    componentDidUpdate() {\n        console.log(\"\");\n    }\n\n    componentWillUnmount() {\n        console.log(\"\");\n    }\n\n    changesState() {\n\n    }\n\n    handleChange = (event) => {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value,\n        })\n    }\n    /*\n    formSubmission(event) {\n        event.preventDefault();\n        console.log(this.state);\n        this.setState({ submissionConfirmed: true });\n        //this\n        //const response = await fetch(.../thing);\n        //const data = await response.jsonStringify();\n        //if(data === 200){\n        //    redirect to things \n        //} else {\n        //    redirect to error page\n        //}\n    }\n*/\n    submitSearch(arg) {\n        console.log(arg);\n        this.setState({ submissionConfirmed: true, searchCriteria: arg });\n\n\n    }\n\n    render() {\n        const { submissionConfirmed, searchCriteria } = this.state;\n\n        if (submissionConfirmed) {\n            return (\n                <>\n                    <SearchBar submitSearch={(arg) => this.submitSearch(arg)} />\n                    <Things searchCriteria={searchCriteria} />\n                </>\n            );\n        }\n        else {\n            return (\n                <SearchBar submitSearch={(arg) => this.submitSearch(arg)} />\n            );\n        }\n    }\n}\n\nexport default Home;","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Login.js",[],"/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/SearchBar.js",["57","58"],"import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './index.css';\n\nclass SearchBar extends Component {\n\n    state = {\n        item: '',\n        dateFrom: '',\n        dateTo: '',\n        location: ''\n    }\n\n    constructor(props) {\n        super(props);\n        console.log(\"\");\n    }\n\n    componentDidMount() {\n        console.log(\"\");\n    }\n\n    componentDidUpdate() {\n        console.log(\"\");\n    }\n\n    componentWillUnmount() {\n        console.log(\"\");\n    }\n\n    changesState() {\n\n    }\n\n    handleChange = (event) => {\n        const { name, value } = event.target\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    formSubmission(event) {\n        event.preventDefault();\n        this.props.submitSearch(this.state);\n    }\n\n    render() {\n        const { item, dateFrom, dateTo, location } = this.state;\n        return (\n            <main>\n                <h1></h1>\n                <form type=\"submit\" className=\"searchBar\">\n                    <span><input type=\"text\" name=\"item\" id=\"item\" value={item} onChange={(e) => this.handleChange(e)} placeholder='item' /></span>\n                    <span><input type=\"text\" name=\"dateFrom\" id=\"dateFrom\" value={dateFrom} onChange={(e) => this.handleChange(e)} placeholder='dateFrom' /></span>\n                    <span><input type=\"text\" name=\"dateTo\" id=\"dateTo\" value={dateTo} onChange={(e) => this.handleChange(e)} placeholder='dateTo' /></span>\n                    <span><input type=\"text\" name=\"location\" id=\"location\" value={location} onChange={(e) => this.handleChange(e)} placeholder='location' /></span>\n                    <span><button onClick={(e) => this.formSubmission(e)} >Click Me!</button></span>\n                </form>\n            </main>\n        );\n    }\n}\n\nexport default SearchBar;","/Users/rob/Code/sigma_group_project/apr-2021-appliances/FrontEnd/web-app/src/Things.js",["59"],"import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './index.css';\n\nclass Things extends Component {\n    render() {\n        return (\n            <h1>{JSON.stringify(this.props.searchCriteria)}</h1>\n        );\n    }\n}\n\nexport default Things;",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":38,"column":17,"nodeType":"66","messageId":"67","endLine":38,"endColumn":27},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":18},{"ruleId":"64","severity":1,"message":"69","line":53,"column":15,"nodeType":"66","messageId":"67","endLine":53,"endColumn":20},{"ruleId":"64","severity":1,"message":"70","line":53,"column":22,"nodeType":"66","messageId":"67","endLine":53,"endColumn":31},{"ruleId":"64","severity":1,"message":"71","line":53,"column":33,"nodeType":"66","messageId":"67","endLine":53,"endColumn":42},{"ruleId":"72","severity":1,"message":"73","line":107,"column":7,"nodeType":"74","messageId":"75","endLine":153,"endColumn":8},{"ruleId":"76","severity":1,"message":"77","line":108,"column":26,"nodeType":"78","messageId":"79","endLine":108,"endColumn":28},{"ruleId":"76","severity":1,"message":"77","line":110,"column":25,"nodeType":"78","messageId":"79","endLine":110,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":112,"column":21,"nodeType":"78","messageId":"79","endLine":112,"endColumn":23},{"ruleId":"76","severity":1,"message":"77","line":114,"column":25,"nodeType":"78","messageId":"79","endLine":118,"endColumn":10},{"ruleId":"76","severity":1,"message":"77","line":120,"column":25,"nodeType":"78","messageId":"79","endLine":124,"endColumn":10},{"ruleId":"76","severity":1,"message":"77","line":126,"column":19,"nodeType":"78","messageId":"79","endLine":126,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":128,"column":28,"nodeType":"78","messageId":"79","endLine":143,"endColumn":10},{"ruleId":"76","severity":1,"message":"77","line":145,"column":25,"nodeType":"78","messageId":"79","endLine":145,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":147,"column":25,"nodeType":"78","messageId":"79","endLine":147,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":149,"column":20,"nodeType":"78","messageId":"79","endLine":149,"endColumn":22},{"ruleId":"76","severity":1,"message":"77","line":151,"column":24,"nodeType":"78","messageId":"79","endLine":151,"endColumn":26},{"ruleId":"80","severity":1,"message":"81","line":203,"column":80,"nodeType":"82","endLine":203,"endColumn":99},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":18},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":51,"column":17,"nodeType":"85","endLine":51,"endColumn":21},{"ruleId":"64","severity":1,"message":"68","line":2,"column":10,"nodeType":"66","messageId":"67","endLine":2,"endColumn":18},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'email' is assigned a value but never used.","'password1' is assigned a value but never used.","'password2' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]